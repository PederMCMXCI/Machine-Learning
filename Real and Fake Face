# Gesichtsklassifikation: Fake vs. Real Faces
# Die Datens√§tze stammen von https://www.kaggle.com/
# Dieses Projekt besch√§ftigt sich mit der Klassifizierung von gef√§lschten (fake) und echten (real) Gesichtern 
# mithilfe eines tiefen neuronalen Netzes. Es wurden folgende Parameter genutzt:
#model = InceptionResNetV2Model(num_classes=len(train_dataset.classes))
#optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)
#criterion = nn.CrossEntropyLoss()
#scheduler = CosineAnnealingLR(optimizer, T_max=10, eta_min=0)
# Die Umgebung basiert auf einem Docker-Container mit PyTorch und wird in Visual Studio Code genutzt.
# Ziel ist es, pr√§zise Metriken wie Genauigkeit, Pr√§zision, Recall und F1-Score zu berechnen.

#Train Metrics - Accuracy: 0.9960, Precision: 0.9960, Recall: 0.9960, F1 Score: 0.9960
#Test Metrics - Accuracy: 0.9640, Precision: 0.9640, Recall: 0.9640, F1 Score: 0.9640
#Classification Report:
 #             precision    recall  f1-score   support

 #       fake       0.96      0.97      0.96       500
 #       real       0.97      0.96      0.96       500

  #  accuracy                           0.96      1000
  # macro avg       0.96      0.96      0.96      1000
#weighted avg       0.96      0.96      0.96      1000

import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt
import numpy as np
from tqdm import tqdm
import os
import pandas as pd
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, f1_score, precision_score, recall_score
import seaborn as sns
from torch.optim.lr_scheduler import CosineAnnealingLR
from pytorchcv.model_provider import get_model as ptcv_get_model 

# Setze das Ger√§t auf CUDA, wenn verf√ºgbar
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

# Data Augmentation und Normalisierung
transform = transforms.Compose([
    transforms.Resize((299, 299)),
    transforms.RandomHorizontalFlip(),
    transforms.RandomRotation(10),
    transforms.RandomResizedCrop(299, scale=(0.8, 1.0)),
    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.2),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

# üî• Verzeichnisse
parent_dir = "/workspace/daten"
train_dir = os.path.join(parent_dir, "train")
test_dir = os.path.join(parent_dir, "test")

# Lade die Datens√§tze
train_dataset = datasets.ImageFolder(root=train_dir, transform=transform)
test_dataset = datasets.ImageFolder(root=test_dir, transform=transform)

# DataLoader f√ºr Training und Test
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

class InceptionResNetV2Model(nn.Module):
    def __init__(self, num_classes):
        super(InceptionResNetV2Model, self).__init__()
        inception_resnet_v2 = ptcv_get_model("inceptionresnetv2", pretrained=True)
        in_features = inception_resnet_v2.output[-1].in_features if isinstance(inception_resnet_v2.output, nn.Sequential) else inception_resnet_v2.output.in_features
        inception_resnet_v2.output = nn.Linear(in_features, num_classes)
        self.model = inception_resnet_v2

    def forward(self, x):
        return self.model(x)

def calculate_metrics(y_true, y_pred):
    accuracy = accuracy_score(y_true, y_pred)
    precision = precision_score(y_true, y_pred, average='weighted')
    recall = recall_score(y_true, y_pred, average='weighted')
    f1 = f1_score(y_true, y_pred, average='weighted')
    return accuracy, precision, recall, f1

def train_model(model, device, train_loader, criterion, optimizer, scheduler, num_epochs=30):
    model.to(device)
    for epoch in range(num_epochs):
        model.train()
        total_train_loss = 0
        y_true, y_pred = [], []
        progress_bar_train = tqdm(train_loader, desc=f'Epoch {epoch+1}/{num_epochs} [Training]', leave=True)
        for images, labels in progress_bar_train:
            images, labels = images.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            total_train_loss += loss.item()
            _, predicted = torch.max(outputs, 1)
            y_true.extend(labels.cpu().numpy())
            y_pred.extend(predicted.cpu().numpy())
        train_accuracy, train_precision, train_recall, train_f1 = calculate_metrics(y_true, y_pred)
        print(f'Train Metrics - Accuracy: {train_accuracy:.4f}, Precision: {train_precision:.4f}, Recall: {train_recall:.4f}, F1 Score: {train_f1:.4f}')
        scheduler.step()
    return model

def evaluate_model(model, test_loader, class_names):
    model.eval()
    y_true, y_pred = [], []
    with torch.no_grad():
        for images, labels in test_loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            _, predicted = torch.max(outputs, 1)
            y_true.extend(labels.cpu().numpy())
            y_pred.extend(predicted.cpu().numpy())
    test_accuracy, test_precision, test_recall, test_f1 = calculate_metrics(y_true, y_pred)
    print(f'Test Metrics - Accuracy: {test_accuracy:.4f}, Precision: {test_precision:.4f}, Recall: {test_recall:.4f}, F1 Score: {test_f1:.4f}')
    print("Classification Report:")
    print(classification_report(y_true, y_pred, target_names=class_names))
    cm = confusion_matrix(y_true, y_pred)
    sns.heatmap(cm, annot=True, fmt="d", cmap='Blues', xticklabels=class_names, yticklabels=class_names)
    plt.title('Confusion Matrix')
    plt.xlabel('Predicted Label')
    plt.ylabel('True Label')
    plt.show()

model = InceptionResNetV2Model(num_classes=len(train_dataset.classes))
optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)
criterion = nn.CrossEntropyLoss()
scheduler = CosineAnnealingLR(optimizer, T_max=10, eta_min=0)

model = train_model(model, device, train_loader, criterion, optimizer, scheduler, num_epochs=30)
evaluate_model(model, test_loader, train_dataset.classes)

